import type { NextRequest } from "next/server"

// –ü—Ä–æ—Å—Ç–æ–π WebSocket —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏–≥—Ä—ã
interface GameRoom {
  id: string
  name: string
  hostId: string
  players: Map<string, Player>
  maxPlayers: number
  minPlayers: number
  isPrivate: boolean
  password?: string
  status: "waiting" | "playing" | "finished"
  gameState?: any
  lastUpdate: number
  chatMessages: ChatMessage[]
}

interface Player {
  id: string
  name: string
  role?: string
  isAlive: boolean
  isBot: boolean
  isHost: boolean
  ws?: WebSocket
}

interface ChatMessage {
  id: string
  sender: string
  message: string
  timestamp: number
  type: "user" | "system"
}

interface GameMessage {
  type: "joinRoom" | "leaveRoom" | "startGame" | "chatMessage" | "getRoomState"
  roomId?: string
  playerId?: string
  playerName?: string
  data?: any
}

class GameServer {
  private rooms = new Map<string, GameRoom>()
  private connections = new Map<WebSocket, { playerId: string; roomId?: string }>()

  generateRoomId(): string {
    return Math.random().toString(36).substring(2, 8).toUpperCase()
  }

  generatePlayerId(): string {
    return Math.random().toString(36).substring(2, 15)
  }

  createRoom(
    name: string,
    maxPlayers: number,
    minPlayers: number,
    isPrivate: boolean,
    password?: string,
    hostId?: string,
  ): string {
    const roomId = this.generateRoomId()
    const room: GameRoom = {
      id: roomId,
      name,
      hostId: hostId || this.generatePlayerId(),
      players: new Map(),
      maxPlayers,
      minPlayers,
      isPrivate,
      password,
      status: "waiting",
      lastUpdate: Date.now(),
      chatMessages: [],
    }

    this.rooms.set(roomId, room)
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–∞ –∫–æ–º–Ω–∞—Ç–∞ ${roomId}: ${name}`)
    return roomId
  }

  joinRoom(roomId: string, playerId: string, playerName: string, ws: WebSocket, password?: string): boolean {
    const room = this.rooms.get(roomId)
    if (!room) {
      console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –Ω–µ –Ω–∞–π–¥–µ–Ω–∞`)
      return false
    }

    if (room.isPrivate && room.password !== password) {
      console.log(`‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å –¥–ª—è –∫–æ–º–Ω–∞—Ç—ã ${roomId}`)
      return false
    }

    if (room.players.size >= room.maxPlayers) {
      console.log(`‚ùå –ö–æ–º–Ω–∞—Ç–∞ ${roomId} –ø–µ—Ä–µ–ø–æ–ª–Ω–µ–Ω–∞`)
      return false
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø–æ–¥–∫–ª—é—á–µ–Ω –ª–∏ —É–∂–µ —ç—Ç–æ—Ç –∏–≥—Ä–æ–∫
    if (room.players.has(playerId)) {
      console.log(`‚ö†Ô∏è –ò–≥—Ä–æ–∫ ${playerName} —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId}, –æ–±–Ω–æ–≤–ª—è–µ–º WebSocket`)
      const existingPlayer = room.players.get(playerId)!
      existingPlayer.ws = ws
      this.connections.set(ws, { playerId, roomId })

      // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏–≤—à–µ–º—É—Å—è –∏–≥—Ä–æ–∫—É
      this.sendRoomState(ws, roomId)
      return true
    }

    const isHost = room.players.size === 0 || playerId === room.hostId
    const player: Player = {
      id: playerId,
      name: playerName,
      isAlive: true,
      isBot: false,
      isHost,
      ws,
    }

    // –î–æ–±–∞–≤–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –≤ –∫–æ–º–Ω–∞—Ç—É
    room.players.set(playerId, player)
    this.connections.set(ws, { playerId, roomId })

    console.log(`‚úÖ –ò–≥—Ä–æ–∫ ${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ ${roomId}. –í—Å–µ–≥–æ –∏–≥—Ä–æ–∫–æ–≤: ${room.players.size}`)

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const systemMessage: ChatMessage = {
      id: Date.now().toString(),
      sender: "–°–∏—Å—Ç–µ–º–∞",
      message: `${playerName} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`,
      timestamp: Date.now(),
      type: "system",
    }
    room.chatMessages.push(systemMessage)

    // –í–ê–ñ–ù–û: –°–Ω–∞—á–∞–ª–∞ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –Ω–æ–≤–æ–º—É –∏–≥—Ä–æ–∫—É
    this.sendRoomState(ws, roomId)

    // –ó–∞—Ç–µ–º —É–≤–µ–¥–æ–º–ª—è–µ–º –í–°–ï–• –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤ –æ –Ω–æ–≤–æ–º —É—á–∞—Å—Ç–Ω–∏–∫–µ
    this.broadcastToRoomExcept(roomId, playerId, {
      type: "playerJoined",
      data: { player: this.playerToJSON(player) },
    })

    // –ò –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –í–°–ï–ú –∏–≥—Ä–æ–∫–∞–º –≤ –∫–æ–º–Ω–∞—Ç–µ
    setTimeout(() => {
      this.broadcastRoomState(roomId)
    }, 100)

    return true
  }

  leaveRoom(playerId: string, roomId?: string) {
    if (!roomId) return

    const room = this.rooms.get(roomId)
    if (!room) return

    const player = room.players.get(playerId)
    if (!player) return

    room.players.delete(playerId)

    console.log(`‚ùå –ò–≥—Ä–æ–∫ ${player.name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É ${roomId}. –û—Å—Ç–∞–ª–æ—Å—å –∏–≥—Ä–æ–∫–æ–≤: ${room.players.size}`)

    // –ï—Å–ª–∏ –∫–æ–º–Ω–∞—Ç–∞ –ø—É—Å—Ç–∞—è, —É–¥–∞–ª—è–µ–º –µ—ë
    if (room.players.size === 0) {
      this.rooms.delete(roomId)
      console.log(`üóëÔ∏è –ö–æ–º–Ω–∞—Ç–∞ ${roomId} —É–¥–∞–ª–µ–Ω–∞ (–ø—É—Å—Ç–∞—è)`)
      return
    }

    // –ï—Å–ª–∏ —Ö–æ—Å—Ç —É—à–µ–ª, –Ω–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ
    if (player.isHost) {
      const newHost = Array.from(room.players.values())[0]
      if (newHost) {
        newHost.isHost = true
        room.hostId = newHost.id
        console.log(`üëë –ù–æ–≤—ã–π —Ö–æ—Å—Ç –∫–æ–º–Ω–∞—Ç—ã ${roomId}: ${newHost.name}`)
      }
    }

    // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    const systemMessage: ChatMessage = {
      id: Date.now().toString(),
      sender: "–°–∏—Å—Ç–µ–º–∞",
      message: `${player.name} –ø–æ–∫–∏–Ω—É–ª –∏–≥—Ä—É`,
      timestamp: Date.now(),
      type: "system",
    }
    room.chatMessages.push(systemMessage)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
    this.broadcastToRoom(roomId, {
      type: "playerLeft",
      data: { playerId },
    })

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ –≤—Å–µ–º
    this.broadcastRoomState(roomId)
  }

  addChatMessage(roomId: string, sender: string, message: string, messageId: string) {
    const room = this.rooms.get(roomId)
    if (!room) return

    const chatMessage: ChatMessage = {
      id: messageId,
      sender,
      message,
      timestamp: Date.now(),
      type: "user",
    }

    room.chatMessages.push(chatMessage)
    console.log(`üí¨ –°–æ–æ–±—â–µ–Ω–∏–µ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –æ—Ç ${sender}: ${message}`)

    // –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –≤—Å–µ–º –≤ –∫–æ–º–Ω–∞—Ç–µ –ö–†–û–ú–ï –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
    this.broadcastToRoomExcept(roomId, this.getPlayerIdBySender(roomId, sender), {
      type: "chatMessage",
      data: chatMessage,
    })
  }

  getPlayerIdBySender(roomId: string, senderName: string): string | null {
    const room = this.rooms.get(roomId)
    if (!room) return null

    for (const [playerId, player] of room.players) {
      if (player.name === senderName) {
        return playerId
      }
    }
    return null
  }

  startGame(roomId: string, hostId: string) {
    const room = this.rooms.get(roomId)
    if (!room || room.hostId !== hostId) return

    if (room.players.size < room.minPlayers) return

    room.status = "playing"
    console.log(`üéÆ –ò–≥—Ä–∞ –≤ –∫–æ–º–Ω–∞—Ç–µ ${roomId} –Ω–∞—á–∞–ª–∞—Å—å`)

    // –£–≤–µ–¥–æ–º–ª—è–µ–º –≤—Å–µ—Ö –æ –Ω–∞—á–∞–ª–µ –∏–≥—Ä—ã
    this.broadcastToRoom(roomId, {
      type: "gameStarted",
      data: { players: Array.from(room.players.values()).map((p) => this.playerToJSON(p)) },
    })
  }

  sendRoomState(ws: WebSocket, roomId: string) {
    const room = this.rooms.get(roomId)
    if (!room || ws.readyState !== WebSocket.OPEN) return

    const roomState = {
      roomInfo: {
        id: room.id,
        name: room.name,
        maxPlayers: room.maxPlayers,
        minPlayers: room.minPlayers,
        isPrivate: room.isPrivate,
        status: room.status,
      },
      players: Array.from(room.players.values()).map((p) => this.playerToJSON(p)),
      chatMessages: room.chatMessages,
    }

    console.log(`üì§ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId}. –ò–≥—Ä–æ–∫–æ–≤: ${roomState.players.length}`)

    ws.send(
      JSON.stringify({
        type: "roomState",
        data: roomState,
      }),
    )
  }

  broadcastRoomState(roomId: string) {
    const room = this.rooms.get(roomId)
    if (!room) return

    console.log(`üì° –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫–æ–º–Ω–∞—Ç—ã ${roomId} –≤—Å–µ–º –∏–≥—Ä–æ–∫–∞–º (${room.players.size} –∏–≥—Ä–æ–∫–æ–≤)`)

    room.players.forEach((player, playerId) => {
      if (player.ws && player.ws.readyState === WebSocket.OPEN) {
        this.sendRoomState(player.ws, roomId)
      } else {
        console.log(`‚ö†Ô∏è WebSocket –∏–≥—Ä–æ–∫–∞ ${player.name} –Ω–µ –∞–∫—Ç–∏–≤–µ–Ω`)
      }
    })
  }

  broadcastToRoom(roomId: string, message: any) {
    const room = this.rooms.get(roomId)
    if (!room) return

    console.log(`üì° –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ ${message.type} –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId}`)

    room.players.forEach((player) => {
      if (player.ws && player.ws.readyState === WebSocket.OPEN) {
        player.ws.send(JSON.stringify(message))
      }
    })
  }

  broadcastToRoomExcept(roomId: string, excludePlayerId: string | null, message: any) {
    const room = this.rooms.get(roomId)
    if (!room) return

    console.log(`üì° –†–∞—Å—Å—ã–ª–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Ç–∏–ø–∞ ${message.type} –≤ –∫–æ–º–Ω–∞—Ç—É ${roomId} (–∫—Ä–æ–º–µ ${excludePlayerId})`)

    room.players.forEach((player, playerId) => {
      if (playerId !== excludePlayerId && player.ws && player.ws.readyState === WebSocket.OPEN) {
        player.ws.send(JSON.stringify(message))
      }
    })
  }

  playerToJSON(player: Player) {
    return {
      id: player.id,
      name: player.name,
      isHost: player.isHost,
      isAlive: player.isAlive,
      role: player.role,
    }
  }

  getRooms(): any[] {
    return Array.from(this.rooms.values())
      .filter((room) => !room.isPrivate && room.status === "waiting")
      .map((room) => ({
        id: room.id,
        name: room.name,
        players: room.players.size,
        maxPlayers: room.maxPlayers,
        minPlayers: room.minPlayers,
        status: room.status,
      }))
  }

  handleConnection(ws: WebSocket) {
    console.log("üîå –ù–æ–≤–æ–µ WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ")

    ws.on("message", (data: string) => {
      try {
        const message: GameMessage = JSON.parse(data)
        this.handleMessage(ws, message)
      } catch (error) {
        console.error("‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è:", error)
        ws.send(
          JSON.stringify({
            type: "error",
            data: { message: "–û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–æ–æ–±—â–µ–Ω–∏—è" },
          }),
        )
      }
    })

    ws.on("close", () => {
      console.log("üîå WebSocket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∑–∞–∫—Ä—ã—Ç–æ")
      const connection = this.connections.get(ws)
      if (connection) {
        this.leaveRoom(connection.playerId, connection.roomId)
        this.connections.delete(ws)
      }
    })

    ws.on("error", (error) => {
      console.error("‚ùå WebSocket –æ—à–∏–±–∫–∞:", error)
    })
  }

  private handleMessage(ws: WebSocket, message: GameMessage) {
    console.log(`üì® –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ: ${message.type}`, {
      roomId: message.roomId,
      playerId: message.playerId,
      playerName: message.playerName,
    })

    switch (message.type) {
      case "joinRoom":
        if (message.roomId && message.playerId && message.playerName) {
          const success = this.joinRoom(message.roomId, message.playerId, message.playerName, ws)
          if (!success) {
            ws.send(
              JSON.stringify({
                type: "error",
                data: { message: "–ù–µ —É–¥–∞–ª–æ—Å—å –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è –∫ –∫–æ–º–Ω–∞—Ç–µ" },
              }),
            )
          }
        }
        break

      case "leaveRoom":
        if (message.roomId && message.playerId) {
          this.leaveRoom(message.playerId, message.roomId)
        }
        break

      case "chatMessage":
        if (message.roomId && message.data?.sender && message.data?.message) {
          this.addChatMessage(
            message.roomId,
            message.data.sender,
            message.data.message,
            message.data.id || Date.now().toString(),
          )
        }
        break

      case "startGame":
        if (message.roomId && message.playerId) {
          this.startGame(message.roomId, message.playerId)
        }
        break

      case "getRoomState":
        if (message.roomId) {
          this.sendRoomState(ws, message.roomId)
        }
        break

      default:
        console.log("‚ùì –ù–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è:", message.type)
    }
  }
}

const gameServer = new GameServer()

export async function GET(request: NextRequest) {
  const { searchParams } = new URL(request.url)
  const upgrade = request.headers.get("upgrade")

  if (upgrade !== "websocket") {
    return new Response("Expected websocket", { status: 426 })
  }

  // –í —Ä–µ–∞–ª—å–Ω–æ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏ –∑–¥–µ—Å—å –±—ã–ª –±—ã WebSocket upgrade
  // –î–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–µ—Ä–µ
  return new Response(
    JSON.stringify({
      message: "WebSocket server ready",
      rooms: gameServer.getRooms().length,
    }),
    {
      headers: { "Content-Type": "application/json" },
    },
  )
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –≤ –¥—Ä—É–≥–∏—Ö –º–µ—Å—Ç–∞—Ö
export { gameServer }
