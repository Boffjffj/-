import { type NextRequest, NextResponse } from "next/server"
import { validateRoomData, generateId, generateRoomCode, createErrorHandler } from "../../../src/utils/safe-storage"

// –•—Ä–∞–Ω–∏–ª–∏—â–µ –∫–æ–º–Ω–∞—Ç –≤ –ø–∞–º—è—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞
const rooms = new Map<string, GameRoom>()
const players = new Map<string, Player>()

interface Player {
  id: string
  name: string
  roomId?: string
  lastSeen: number
  isHost: boolean
}

interface GameRoom {
  id: string
  name: string
  hostId: string
  players: string[]
  maxPlayers: number
  minPlayers: number
  isPrivate: boolean
  password?: string
  status: "waiting" | "playing" | "finished"
  gameState?: any
  lastUpdate: number
  createdAt: number
  chatMessages: ChatMessage[]
}

interface ChatMessage {
  id: string
  sender: string
  message: string
  timestamp: number
  type: "user" | "system"
}

// –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–º–Ω–∞—Ç –∏ –∏–≥—Ä–æ–∫–æ–≤
function cleanup() {
  const now = Date.now()
  const timeout = 30 * 60 * 1000 // 30 –º–∏–Ω—É—Ç
  const maxRooms = 100 // –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç

  // –£–¥–∞–ª—è–µ–º –Ω–µ–∞–∫—Ç–∏–≤–Ω—ã—Ö –∏–≥—Ä–æ–∫–æ–≤
  for (const [playerId, player] of players.entries()) {
    if (now - player.lastSeen > timeout) {
      console.log(`üóëÔ∏è Removing inactive player: ${playerId}`)
      players.delete(playerId)

      // –£–¥–∞–ª—è–µ–º –∏–≥—Ä–æ–∫–∞ –∏–∑ –∫–æ–º–Ω–∞—Ç—ã
      if (player.roomId) {
        const room = rooms.get(player.roomId)
        if (room) {
          room.players = room.players.filter((id) => id !== playerId)

          // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
          room.chatMessages.push({
            id: `system-${Date.now()}`,
            sender: "–°–∏—Å—Ç–µ–º–∞",
            message: `–ò–≥—Ä–æ–∫ ${player.name} –æ—Ç–∫–ª—é—á–∏–ª—Å—è`,
            timestamp: Date.now(),
            type: "system",
          })

          if (room.players.length === 0) {
            console.log(`üóëÔ∏è Removing empty room: ${player.roomId}`)
            rooms.delete(player.roomId)
          } else if (room.hostId === playerId) {
            // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
            room.hostId = room.players[0]
            const newHost = players.get(room.hostId)
            if (newHost) {
              newHost.isHost = true
              console.log(`üëë New host assigned: ${room.hostId} for room ${player.roomId}`)
            }
          }
        }
      }
    }
  }

  // –£–¥–∞–ª—è–µ–º –ø—É—Å—Ç—ã–µ –∫–æ–º–Ω–∞—Ç—ã –∏ —Å—Ç–∞—Ä—ã–µ –∫–æ–º–Ω–∞—Ç—ã
  for (const [roomId, room] of rooms.entries()) {
    if (room.players.length === 0 || now - room.lastUpdate > timeout) {
      console.log(`üóëÔ∏è Removing old/empty room: ${roomId}`)
      rooms.delete(roomId)
    }
  }

  // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–Ω–∞—Ç
  if (rooms.size > maxRooms) {
    const sortedRooms = Array.from(rooms.entries()).sort((a, b) => a[1].createdAt - b[1].createdAt)
    const roomsToDelete = sortedRooms.slice(0, rooms.size - maxRooms)

    for (const [roomId] of roomsToDelete) {
      rooms.delete(roomId)
      console.log(`üóëÔ∏è Removed old room due to limit: ${roomId}`)
    }
  }
}

// GET - –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–Ω–∞—Ç
export async function GET() {
  try {
    cleanup()

    const publicRooms = Array.from(rooms.values())
      .filter((room) => !room.isPrivate && room.status === "waiting")
      .map((room) => ({
        id: room.id,
        name: room.name,
        players: room.players.length,
        maxPlayers: room.maxPlayers,
        status: room.status,
        isPrivate: room.isPrivate,
      }))
      .slice(0, 50) // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º—ã—Ö –∫–æ–º–Ω–∞—Ç

    console.log(`üìä GET /api/rooms - Returning ${publicRooms.length} rooms`)
    return NextResponse.json({ success: true, rooms: publicRooms })
  } catch (error) {
    const errorHandler = createErrorHandler("GET /api/rooms")
    return NextResponse.json(errorHandler(error))
  }
}

// POST - —Å–æ–∑–¥–∞—Ç—å –∫–æ–º–Ω–∞—Ç—É –∏–ª–∏ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏—Ç—å—Å—è
export async function POST(request: NextRequest) {
  try {
    cleanup()

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä –∑–∞–ø—Ä–æ—Å–∞
    const contentLength = request.headers.get("content-length")
    if (contentLength && Number.parseInt(contentLength) > 1024) {
      return NextResponse.json({ success: false, error: "–°–ª–∏—à–∫–æ–º –±–æ–ª—å—à–æ–π –∑–∞–ø—Ä–æ—Å" })
    }

    const body = await request.json()
    console.log("üì® POST /api/rooms - Received body:", body)

    // –í–∞–ª–∏–¥–∏—Ä—É–µ–º –≤—Ö–æ–¥–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    const validationErrors = validateRoomData(body)
    if (validationErrors.length > 0) {
      return NextResponse.json({ success: false, error: validationErrors[0] })
    }

    const { action, playerName, roomName, maxPlayers, minPlayers, isPrivate, password, roomId, playerId } = body

    if (action === "create") {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –∫–æ–º–Ω–∞—Ç
      if (rooms.size >= 100) {
        return NextResponse.json({ success: false, error: "–î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∫–æ–º–Ω–∞—Ç –Ω–∞ —Å–µ—Ä–≤–µ—Ä–µ" })
      }

      if (!roomName?.trim() || !playerName?.trim() || !maxPlayers) {
        return NextResponse.json({ success: false, error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" })
      }

      const newPlayerId = playerId || generateId()
      const newRoomId = generateRoomCode()

      const player: Player = {
        id: newPlayerId,
        name: playerName.trim(),
        roomId: newRoomId,
        lastSeen: Date.now(),
        isHost: true,
      }

      const room: GameRoom = {
        id: newRoomId,
        name: roomName.trim(),
        hostId: newPlayerId,
        players: [newPlayerId],
        maxPlayers: Math.min(Math.max(maxPlayers, 4), 10), // –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–∏–∞–ø–∞–∑–æ–Ω
        minPlayers: Math.min(Math.max(minPlayers || 4, 4), 8),
        isPrivate: Boolean(isPrivate),
        password: isPrivate ? password?.trim() : undefined,
        status: "waiting",
        lastUpdate: Date.now(),
        createdAt: Date.now(),
        chatMessages: [
          {
            id: `system-${Date.now()}`,
            sender: "–°–∏—Å—Ç–µ–º–∞",
            message: `–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –∫–æ–º–Ω–∞—Ç—É "${roomName.trim()}"!`,
            timestamp: Date.now(),
            type: "system",
          },
          {
            id: `system-${Date.now() + 1}`,
            sender: "–°–∏—Å—Ç–µ–º–∞",
            message: `–ò–≥—Ä–æ–∫ ${playerName.trim()} —Å–æ–∑–¥–∞–ª –∫–æ–º–Ω–∞—Ç—É`,
            timestamp: Date.now(),
            type: "system",
          },
        ],
      }

      players.set(newPlayerId, player)
      rooms.set(newRoomId, room)

      console.log(`üéâ Room created: ${newRoomId} by player ${newPlayerId} (${playerName})`)
      console.log(`üë• Players in room: ${room.players.length}`)

      return NextResponse.json({
        success: true,
        roomId: newRoomId,
        playerId: newPlayerId,
        isHost: true,
      })
    }

    if (action === "join") {
      if (!roomId?.trim() || !playerName?.trim()) {
        return NextResponse.json({ success: false, error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã–µ –ø–æ–ª—è" })
      }

      console.log(`üéØ Attempting to join room: ${roomId}`)
      const room = rooms.get(roomId.trim())
      if (!room) {
        console.log(`‚ùå Room not found: ${roomId}`)
        return NextResponse.json({ success: false, error: "–ö–æ–º–Ω–∞—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞" })
      }

      console.log(
        `üè† Room found: ${room.name}, status: ${room.status}, players: ${room.players.length}/${room.maxPlayers}`,
      )

      if (room.isPrivate && room.password !== password?.trim()) {
        console.log(`‚ùå Invalid password for room: ${roomId}`)
        return NextResponse.json({ success: false, error: "–ù–µ–≤–µ—Ä–Ω—ã–π –ø–∞—Ä–æ–ª—å" })
      }

      if (room.players.length >= room.maxPlayers) {
        console.log(`‚ùå Room is full: ${roomId}`)
        return NextResponse.json({ success: false, error: "–ö–æ–º–Ω–∞—Ç–∞ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞" })
      }

      if (room.status !== "waiting") {
        console.log(`‚ùå Game already started in room: ${roomId}`)
        return NextResponse.json({ success: false, error: "–ò–≥—Ä–∞ —É–∂–µ –Ω–∞—á–∞–ª–∞—Å—å" })
      }

      const newPlayerId = playerId || generateId()

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –ª–∏ –∏–≥—Ä–æ–∫ —É–∂–µ
      if (room.players.includes(newPlayerId)) {
        console.log(`‚ö†Ô∏è Player ${newPlayerId} already in room ${roomId}`)
        const existingPlayer = players.get(newPlayerId)
        if (existingPlayer) {
          existingPlayer.lastSeen = Date.now()
        }
        return NextResponse.json({
          success: true,
          roomId,
          playerId: newPlayerId,
          isHost: room.hostId === newPlayerId,
        })
      }

      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ –∏–≥—Ä–æ–∫–∞ —Å —Ç–∞–∫–∏–º –∂–µ –∏–º–µ–Ω–µ–º
      const existingPlayerWithName = room.players.find((pid) => {
        const p = players.get(pid)
        return p && p.name.toLowerCase() === playerName.trim().toLowerCase()
      })

      if (existingPlayerWithName) {
        return NextResponse.json({ success: false, error: "–ò–≥—Ä–æ–∫ —Å —Ç–∞–∫–∏–º –∏–º–µ–Ω–µ–º —É–∂–µ –≤ –∫–æ–º–Ω–∞—Ç–µ" })
      }

      const player: Player = {
        id: newPlayerId,
        name: playerName.trim(),
        roomId: roomId.trim(),
        lastSeen: Date.now(),
        isHost: false,
      }

      room.players.push(newPlayerId)
      room.lastUpdate = Date.now()
      players.set(newPlayerId, player)

      // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–µ–Ω–∏–∏
      room.chatMessages.push({
        id: `system-${Date.now()}`,
        sender: "–°–∏—Å—Ç–µ–º–∞",
        message: `–ò–≥—Ä–æ–∫ ${playerName.trim()} –ø—Ä–∏—Å–æ–µ–¥–∏–Ω–∏–ª—Å—è –∫ –∏–≥—Ä–µ`,
        timestamp: Date.now(),
        type: "system",
      })

      console.log(
        `üéâ Player ${newPlayerId} (${playerName}) joined room ${roomId}. Total players: ${room.players.length}`,
      )

      return NextResponse.json({
        success: true,
        roomId,
        playerId: newPlayerId,
        isHost: false,
      })
    }

    console.log(`‚ùì Unknown action: ${action}`)
    return NextResponse.json({ success: false, error: "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ–µ –¥–µ–π—Å—Ç–≤–∏–µ" })
  } catch (error) {
    const errorHandler = createErrorHandler("POST /api/rooms")
    return NextResponse.json(errorHandler(error))
  }
}

// PUT - –æ–±–Ω–æ–≤–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∏–≥—Ä–æ–∫–∞ (heartbeat)
export async function PUT(request: NextRequest) {
  try {
    const body = await request.json()
    const { playerId } = body

    if (!playerId) {
      return NextResponse.json({ success: false, error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–≥—Ä–æ–∫–∞" })
    }

    const player = players.get(playerId)
    if (player) {
      player.lastSeen = Date.now()

      if (player.roomId) {
        const room = rooms.get(player.roomId)
        if (room) {
          room.lastUpdate = Date.now()
        }
      }
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    const errorHandler = createErrorHandler("PUT /api/rooms")
    return NextResponse.json(errorHandler(error))
  }
}

// DELETE - –ø–æ–∫–∏–Ω—É—Ç—å –∫–æ–º–Ω–∞—Ç—É
export async function DELETE(request: NextRequest) {
  try {
    const body = await request.json()
    const { playerId } = body

    if (!playerId) {
      return NextResponse.json({ success: false, error: "–û—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç ID –∏–≥—Ä–æ–∫–∞" })
    }

    const player = players.get(playerId)
    if (player && player.roomId) {
      const room = rooms.get(player.roomId)
      if (room) {
        room.players = room.players.filter((id) => id !== playerId)

        // –î–æ–±–∞–≤–ª—è–µ–º —Å–∏—Å—Ç–µ–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –≤—ã—Ö–æ–¥–µ
        room.chatMessages.push({
          id: `system-${Date.now()}`,
          sender: "–°–∏—Å—Ç–µ–º–∞",
          message: `–ò–≥—Ä–æ–∫ ${player.name} –ø–æ–∫–∏–Ω—É–ª –∫–æ–º–Ω–∞—Ç—É`,
          timestamp: Date.now(),
          type: "system",
        })

        if (room.players.length === 0) {
          rooms.delete(player.roomId)
          console.log(`üóëÔ∏è Room ${player.roomId} deleted - no players left`)
        } else if (room.hostId === playerId) {
          // –ù–∞–∑–Ω–∞—á–∞–µ–º –Ω–æ–≤–æ–≥–æ —Ö–æ—Å—Ç–∞
          room.hostId = room.players[0]
          const newHost = players.get(room.hostId)
          if (newHost) {
            newHost.isHost = true
            console.log(`üëë New host assigned: ${room.hostId} for room ${player.roomId}`)
          }
        }
      }

      players.delete(playerId)
      console.log(`üëã Player ${playerId} left room ${player.roomId}`)
    }

    return NextResponse.json({ success: true })
  } catch (error) {
    const errorHandler = createErrorHandler("DELETE /api/rooms")
    return NextResponse.json(errorHandler(error))
  }
}

// –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
export function getRoomData(roomId: string) {
  const room = rooms.get(roomId)
  if (!room) return null

  const roomPlayers = room.players
    .map((pid) => {
      const p = players.get(pid)
      return p
        ? {
            id: p.id,
            name: p.name,
            isHost: p.isHost,
            isConnected: Date.now() - p.lastSeen < 10000,
          }
        : null
    })
    .filter(Boolean)

  return {
    roomInfo: {
      id: room.id,
      name: room.name,
      maxPlayers: room.maxPlayers,
      minPlayers: room.minPlayers,
      isPrivate: room.isPrivate,
      status: room.status,
    },
    players: roomPlayers,
    chatMessages: room.chatMessages,
  }
}

export function addChatMessage(roomId: string, sender: string, message: string) {
  const room = rooms.get(roomId)
  if (!room) return false

  const chatMessage: ChatMessage = {
    id: `msg-${Date.now()}-${Math.random()}`,
    sender,
    message,
    timestamp: Date.now(),
    type: "user",
  }

  room.chatMessages.push(chatMessage)
  room.lastUpdate = Date.now()

  console.log(`üí¨ Added chat message in room ${roomId}: ${sender}: ${message}`)
  return true
}
